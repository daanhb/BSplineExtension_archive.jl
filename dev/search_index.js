var documenterSearchIndex = {"docs":
[{"location":"man/basisplatform/#Basis-platforms-1","page":"Basis platform","title":"Basis platforms","text":"","category":"section"},{"location":"man/basisplatform/#dimensional-B-spline-platforms-1","page":"Basis platform","title":"1 dimensional B-spline platforms","text":"","category":"section"},{"location":"man/basisplatform/#","page":"Basis platform","title":"Basis platform","text":"Three platforms of this package generate B-spline bases as primary dictionaries, but different dual dictionaries:","category":"page"},{"location":"man/basisplatform/#","page":"Basis platform","title":"Basis platform","text":"DocTestSetup = quote\n    using BSplineExtension    \nend","category":"page"},{"location":"man/basisplatform/#","page":"Basis platform","title":"Basis platform","text":"julia> P1 = BSplinePlatform()\nBSplinePlatform{Float64,3}()\n\njulia> P2 = EpsBSplinePlatform()\nEpsBSplinePlatform{Float64,3}()\n\njulia> P3 = CDBSplinePlatform()\nCDBSplinePlatform{Float64,3}()\n\njulia> dictionary(P1,100)\nPeriodic equispaced translates of B spline of degree 3\n    ↳ length = 100\n    ↳ Float64 -> Float64\n    ↳ support = 0.0..1.0 (Unit)\n    ↳ degree = 3\n\njulia> dictionary(P2,100)\nPeriodic equispaced translates of B spline of degree 3\n    ↳ length = 100\n    ↳ Float64 -> Float64\n    ↳ support = 0.0..1.0 (Unit)\n    ↳ degree = 3\n\njulia> dictionary(P3,100)\nPeriodic equispaced translates of B spline of degree 3\n    ↳ length = 100\n    ↳ Float64 -> Float64\n    ↳ support = 0.0..1.0 (Unit)\n    ↳ degree = 3\n\njulia> azdual_dict(P1,100)\nDictionary M * P\n\nP\t:\tPeriodic equispaced translates of B spline of degree 3\n\t\t    ↳ length = 100\n\t\t    ↳ Float64 -> Float64\n\t\t    ↳ support = 0.0..1.0 (Unit)\n\t\t    ↳ degree = 3\nM\t:\tMultiplication by Circulant{Float64,Complex{Float64}}\n\njulia> azdual_dict(P2,100)\nDictionary M * P\n\nP\t:\tPeriodic equispaced translates of B spline of degree 3\n\t\t    ↳ length = 100\n\t\t    ↳ Float64 -> Float64\n\t\t    ↳ support = 0.0..1.0 (Unit)\n\t\t    ↳ degree = 3\nM\t:\tMultiplication by BasisFunctions.VerticalBandedMatrix{Float64}\n\njulia> azdual_dict(P3,100)\nEquispaced translates of a discrete kernel dual to B-spline\n    ↳ length = 100\n    ↳ Float64 -> Float64\n    ↳ support = 0.0..1.0 (Unit)\n    ↳ degree = 3\n    ↳ m = 2","category":"page"},{"location":"man/basisplatform/#dimensional-generic-PET-platforms-1","page":"Basis platform","title":"1 dimensional generic PET platforms","text":"","category":"section"},{"location":"man/basisplatform/#","page":"Basis platform","title":"Basis platform","text":"Two platforms of the above are generalized to PeriodicEquispacedTranslates:","category":"page"},{"location":"man/basisplatform/#","page":"Basis platform","title":"Basis platform","text":"julia> PET = BSplineTranslatesBasis(10,3,-1,1)\nPeriodic equispaced translates of a periodic kernel function\n    ↳ length = 10\n    ↳ Float64 -> Float64\n    ↳ support = -1.0..1.0\n\njulia> P4 = PETPlatform(PET)\nPETPlatform{Float64,Float64,GenericPeriodicEquispacedTranslates{Float64,Float64}}(Periodic equispaced translates of a periodic kernel function\n    ↳ length = 10\n    ↳ Float64 -> Float64\n    ↳ support = -1.0..1.0\n\n)\n\njulia> P5 = CDPETPlatform(PET)\nCDPETPlatform{Float64,Float64,GenericPeriodicEquispacedTranslates{Float64,Float64}}(Periodic equispaced translates of a periodic kernel function\n    ↳ length = 10\n    ↳ Float64 -> Float64\n    ↳ support = -1.0..1.0\n\n)\n\njulia> dictionary(P4,100)\nPeriodic equispaced translates of a periodic kernel function\n    ↳ length = 100\n    ↳ Float64 -> Float64\n    ↳ support = -1.0..1.0\n\njulia> dictionary(P5,100)\nPeriodic equispaced translates of a periodic kernel function\n    ↳ length = 100\n    ↳ Float64 -> Float64\n    ↳ support = -1.0..1.0\n\njulia> azdual_dict(P4,100)\nDictionary M * P\n\nP\t:\tPeriodic equispaced translates of a periodic kernel function\n\t\t    ↳ length = 100\n\t\t    ↳ Float64 -> Float64\n\t\t    ↳ support = -1.0..1.0\nM\t:\tMultiplication by Circulant{Float64,Complex{Float64}}\n\njulia> azdual_dict(P5,100)\nEquispaced translates of a discrete kernel dual\n    ↳ Periodic equispaced translates of a periodic kernel function\n      ↳ length = 100\n      ↳ Float64 -> Float64\n      ↳ support = -1.0..1.0\n    ↳ m = 2","category":"page"},{"location":"man/basisplatform/#N-dimensional-1","page":"Basis platform","title":"N dimensional","text":"","category":"section"},{"location":"man/basisplatform/#","page":"Basis platform","title":"Basis platform","text":"julia> P1 = NdBSplinePlatform((3,2))\nProductPlatform{2}((BSplinePlatform{Float64,3}(), BSplinePlatform{Float64,2}()))\n\njulia> P2 = NdEpsBSplinePlatform((1,3))\nProductPlatform{2}((EpsBSplinePlatform{Float64,1}(), EpsBSplinePlatform{Float64,3}()))\n\njulia> P3 = NdCDBSplinePlatform((3,3))\nProductPlatform{2}((CDBSplinePlatform{Float64,3}(), CDBSplinePlatform{Float64,3}()))\n\njulia> dictionary(P1,100)\nDictionary P₂ ⊗ P₁\n\nP₂\t:\tPeriodic equispaced translates of B spline of degree 3\n\t\t    ↳ length = 100\n\t\t    ↳ Float64 -> Float64\n\t\t    ↳ support = 0.0..1.0 (Unit)\n\t\t    ↳ degree = 3\nP₁\t:\tPeriodic equispaced translates of B spline of degree 2\n\t\t    ↳ length = 100\n\t\t    ↳ Float64 -> Float64\n\t\t    ↳ support = 0.0..1.0 (Unit)\n\t\t    ↳ degree = 2\n\njulia> dictionary(P2,100)\nDictionary P₁ ⊗ P₂\n\nP₂\t:\tPeriodic equispaced translates of B spline of degree 3\n\t\t    ↳ length = 100\n\t\t    ↳ Float64 -> Float64\n\t\t    ↳ support = 0.0..1.0 (Unit)\n\t\t    ↳ degree = 3\nP₁\t:\tPeriodic equispaced translates of B spline of degree 1\n\t\t    ↳ length = 100\n\t\t    ↳ Float64 -> Float64\n\t\t    ↳ support = 0.0..1.0 (Unit)\n\t\t    ↳ degree = 1\n\njulia> dictionary(P3,100)\nDictionary P ⊗ P\n\nP\t:\tPeriodic equispaced translates of B spline of degree 3\n\t\t    ↳ length = 100\n\t\t    ↳ Float64 -> Float64\n\t\t    ↳ support = 0.0..1.0 (Unit)\n\t\t    ↳ degree = 3\n\njulia> azdual_dict(P1,100)\nDictionary (M₁ * P₂) ⊗ (M₂ * P₁)\n\nP₂\t:\tPeriodic equispaced translates of B spline of degree 3\n\t\t    ↳ length = 100\n\t\t    ↳ Float64 -> Float64\n\t\t    ↳ support = 0.0..1.0 (Unit)\n\t\t    ↳ degree = 3\nP₁\t:\tPeriodic equispaced translates of B spline of degree 2\n\t\t    ↳ length = 100\n\t\t    ↳ Float64 -> Float64\n\t\t    ↳ support = 0.0..1.0 (Unit)\n\t\t    ↳ degree = 2\nM₂\t:\tMultiplication by Circulant{Float64,Complex{Float64}}\nM₁\t:\tMultiplication by Circulant{Float64,Complex{Float64}}\n\njulia> azdual_dict(P2,100)\nDictionary (M₁ * P₁) ⊗ (M₂ * P₂)\n\nP₂\t:\tPeriodic equispaced translates of B spline of degree 3\n\t\t    ↳ length = 100\n\t\t    ↳ Float64 -> Float64\n\t\t    ↳ support = 0.0..1.0 (Unit)\n\t\t    ↳ degree = 3\nP₁\t:\tPeriodic equispaced translates of B spline of degree 1\n\t\t    ↳ length = 100\n\t\t    ↳ Float64 -> Float64\n\t\t    ↳ support = 0.0..1.0 (Unit)\n\t\t    ↳ degree = 1\nM₂\t:\tMultiplication by BasisFunctions.VerticalBandedMatrix{Float64}\nM₁\t:\tMultiplication by BasisFunctions.VerticalBandedMatrix{Float64}\n\njulia> azdual_dict(P3,100;oversamplingfactor=4)\nDictionary E ⊗ E\n\nE\t:\tEquispaced translates of a discrete kernel dual to B-spline\n\t\t    ↳ length = 100\n\t\t    ↳ Float64 -> Float64\n\t\t    ↳ support = 0.0..1.0 (Unit)\n\t\t    ↳ degree = 3\n\t\t    ↳ m = 2","category":"page"},{"location":"man/basisplatform/#Function-approximation-1","page":"Basis platform","title":"Function approximation","text":"","category":"section"},{"location":"man/basisplatform/#","page":"Basis platform","title":"Basis platform","text":"These duals are used to approximate functions if the SolverStyle option is equal to DualStyle (default):","category":"page"},{"location":"man/basisplatform/#","page":"Basis platform","title":"Basis platform","text":"[.pdf], [generated .tex], [generated .tikz]","category":"page"},{"location":"man/basisplatform/#","page":"Basis platform","title":"Basis platform","text":"(Image: )","category":"page"},{"location":"man/basisplatform/#Convergence-1","page":"Basis platform","title":"Convergence","text":"","category":"section"},{"location":"man/basisplatform/#","page":"Basis platform","title":"Basis platform","text":"The convergence curves show no difference between the different approaches:","category":"page"},{"location":"man/basisplatform/#","page":"Basis platform","title":"Basis platform","text":"[.pdf], [generated .tex], [generated .tikz]","category":"page"},{"location":"man/basisplatform/#","page":"Basis platform","title":"Basis platform","text":"(Image: )","category":"page"},{"location":"man/basisplatform/#B-Spline-BasisPlatforms-Reference-1","page":"Basis platform","title":"B-Spline BasisPlatforms Reference","text":"","category":"section"},{"location":"man/basisplatform/#","page":"Basis platform","title":"Basis platform","text":"Modules = [BSplineExtension.BSplinePlatforms]\nPages = [\"platforms/BSplinePlatforms.jl\"]","category":"page"},{"location":"man/basisplatform/#BSplineExtension.BSplinePlatforms.BSplinePlatform","page":"Basis platform","title":"BSplineExtension.BSplinePlatforms.BSplinePlatform","text":"struct BSplinePlatform{T,D} <: AbstractPeriodicEquispacedTranslatesPlatform{T,T}\n\nA platform of equispaced periodic translates of B-spline of a given order. The dual dictionaries are determined by the inverse of the Gram matrix.\n\nSee also: EpsBSplinePlatform, CDBSplinePlatform\n\nExample\n\njulia> P = BSplinePlatform()\nBSplinePlatform{Float64,3}()\n\njulia> g = sampling_grid(P,10)\n10-element PeriodicEquispacedGrid{Float64}:\n 0.0\n 0.09999999999999999\n 0.19999999999999998\n 0.3\n ⋮\n 0.7000000000000001\n 0.7999999999999999\n 0.9\n\njulia> d1 = dictionary(P,10)\nPeriodic equispaced translates of B spline of degree 3\n    ↳ length = 10\n    ↳ Float64 -> Float64\n    ↳ support = 0.0..1.0 (Unit)\n\n\n\njulia> d2 = azdual_dict(P,10)\nDictionary M * P\n\nP   :   Periodic equispaced translates of B spline of degree 3\n            ↳ length = 10\n            ↳ Float64 -> Float64\n            ↳ support = 0.0..1.0 (Unit)\nM   :   Multiplication by Circulant{Float64,Complex{Float64}}\n\n\njulia> mixedgramoperator(d1,d2,discretemeasure(g))≈IdentityOperator(d1,d2)\ntrue\n\n\n\n\n\n","category":"type"},{"location":"man/basisplatform/#BSplineExtension.BSplinePlatforms.CDBSplinePlatform","page":"Basis platform","title":"BSplineExtension.BSplinePlatforms.CDBSplinePlatform","text":"struct CDBSplinePlatform{T,D} <: AbstractCDPeriodicEquispacedTranslatesPlatform{T,T}\n\nA platform of equispaced periodic translates of B-spline of a given order. Their duals dictionaries are compact, but discrete, i.e., their values are known in an PeriodicEquispacedGrid\n\nSee also: DiscreteBSplineDict, BSplinePlatform, EpsBSplinePlatform\n\nExample\n\njulia> P = CDBSplinePlatform(5)\nCDBSplinePlatform{Float64,5}()\n\njulia> d1 = dictionary(P,20)\nPeriodic equispaced translates of B spline of degree 5\n    ↳ length = 20\n    ↳ Float64 -> Float64\n    ↳ support = 0.0..1.0 (Unit)\n    ↳ degree = 5\n\n\n\njulia> d2 = azdual_dict(P,20)\nEquispaced translates of a discrete kernel dual to B-spline\n    ↳ length = 20\n    ↳ Float64 -> Float64\n    ↳ support = 0.0..1.0 (Unit)\n    ↳ degree = 5\n    ↳ m = 2\n\n\n\njulia> g2 = mixedgramoperator(d1, d2, discretemeasure(sampling_grid(P,20)))\nOperator M₂ * M₁\n\nM₂  :   Multiplication by BasisFunctions.HorizontalBandedMatrix{Float64}\nM₁  :   Multiplication by BasisFunctions.VerticalBandedMatrix{Float64}\n\n\njulia> IdentityOperator(d1)≈g2\ntrue\n\n\n\n\n\n","category":"type"},{"location":"man/basisplatform/#BSplineExtension.BSplinePlatforms.CDPETPlatform","page":"Basis platform","title":"BSplineExtension.BSplinePlatforms.CDPETPlatform","text":"struct CDPETPlatform{T,S,DICT<:PeriodicEquispacedTranslates{T,S}} <: AbstractCDPETPlatorm{T,S,DICT}\n\nA platform of periodic equispaced translates of a kernel. Their duals dictionaries are compact, but discrete, i.e., their values are known in an PeriodicEquispacedGrid. For some kernels these compact duals do not exist.\n\nSee also: PETPlatform, CDBSplinePlatform\n\nExample\n\njulia> P = CDPETPlatform(BSplineTranslatesBasis(6,3,-1,1))\nCDPETPlatform{Float64,Float64,GenericPeriodicEquispacedTranslates{Float64,Float64}}(Periodic equispaced translates of a periodic kernel function\n    ↳ length = 6\n    ↳ Float64 -> Float64\n    ↳ support = -1.0..1.0\n\n)\n\njulia> d1 = dictionary(P,6)\nPeriodic equispaced translates of a periodic kernel function\n    ↳ length = 6\n    ↳ Float64 -> Float64\n    ↳ support = -1.0..1.0\n\n\n\njulia> d2 = azdual_dict(P,6)\nEquispaced translates of a discrete kernel dual\n    ↳ Periodic equispaced translates of a periodic kernel function\n      ↳ length = 6\n      ↳ Float64 -> Float64\n      ↳ support = -1.0..1.0\n    ↳ m = 2\n\n\n\njulia> g2 = mixedgramoperator(d1, d2, discretemeasure(sampling_grid(P,6)))\nOperator M₁ * M₂\n\nM₂  :   Multiplication by BasisFunctions.VerticalBandedMatrix{Float64}\nM₁  :   Multiplication by BasisFunctions.HorizontalBandedMatrix{Float64}\n\n\njulia> g2≈IdentityOperator(d1)\ntrue\n\n\n\n\n\n\n","category":"type"},{"location":"man/basisplatform/#BSplineExtension.BSplinePlatforms.EpsBSplinePlatform","page":"Basis platform","title":"BSplineExtension.BSplinePlatforms.EpsBSplinePlatform","text":"struct EpsBSplinePlatform{T,D} <: AbstractEpsPeriodicEquispacedTranslatesPlatform{T,T}\n\nA platform of equispaced periodic translates of B-spline of a given order. The dual dictionaries are determined by the inverse of the Gram matrix. This Gram matrix has exponentially decaying elements. This platform truncates elemens lower threshold which results in a banded Gram.\n\nSee also: BSplinePlatform, CDBSplinePlatform\n\nExample\n\njulia> P = EpsBSplinePlatform()\nEpsBSplinePlatform{Float64,3}()\n\njulia> d1 = dictionary(P,1000)\nPeriodic equispaced translates of B spline of degree 3\n    ↳ length = 1000\n    ↳ Float64 -> Float64\n    ↳ support = 0.0..1.0 (Unit)\n\n\n\njulia> d2 = azdual_dict(P,1000;threshold=1e-4)\nDictionary M * P\n\nP   :   Periodic equispaced translates of B spline of degree 3\n            ↳ length = 1000\n            ↳ Float64 -> Float64\n            ↳ support = 0.0..1.0 (Unit)\nM   :   Multiplication by BasisFunctions.VerticalBandedMatrix{Float64}\n\n\njulia> g2 = mixedgramoperator(d1, d2, discretemeasure(sampling_grid(P,1000)))\nOperator M₂ * M₁\n\nM₂  :   Multiplication by Circulant{Float64,Complex{Float64}}\nM₁  :   Multiplication by BasisFunctions.VerticalBandedMatrix{Float64}\n\n\njulia> norm(IdentityOperator(d1)-g2)\n0.0004146509264381403\n\n\n\n\n\n","category":"type"},{"location":"man/basisplatform/#BSplineExtension.BSplinePlatforms.PETPlatform","page":"Basis platform","title":"BSplineExtension.BSplinePlatforms.PETPlatform","text":"struct PETPlatform{T,S,DICT<:PeriodicEquispacedTranslates{T,S}} <: AbstractPETPlatorm{T,S,DICT}\n\nA platform of periodic equispaced translates of a kernel.\n\nSee also: CDPETPlatform, BSplinePlatform\n\nExample\n\njulia> P = PETPlatform(BSplineTranslatesBasis(6,3,-1,1))\nPETPlatform{Float64,Float64,GenericPeriodicEquispacedTranslates{Float64,Float64}}(Periodic equispaced translates of a periodic kernel function\n    ↳ length = 6\n    ↳ Float64 -> Float64\n    ↳ support = -1.0..1.0\n\n)\n\njulia> d1 = dictionary(P,6)\nPeriodic equispaced translates of a periodic kernel function\n    ↳ length = 6\n    ↳ Float64 -> Float64\n    ↳ support = -1.0..1.0\n\n\n\njulia> d2 = azdual_dict(P,6)\nDictionary M * P\n\nP   :   Periodic equispaced translates of a periodic kernel function\n            ↳ length = 6\n            ↳ Float64 -> Float64\n            ↳ support = -1.0..1.0\nM   :   Multiplication by Circulant{Float64,Complex{Float64}}\n\n\njulia> g2 = mixedgramoperator(d1, d2, discretemeasure(sampling_grid(P,6)))\nMultiplication by Circulant{Float64,Complex{Float64}}\n\n\n\njulia> g2≈IdentityOperator(d1)\ntrue\n\n\n\n\n\n","category":"type"},{"location":"man/basisplatform/#","page":"Basis platform","title":"Basis platform","text":"The dual dictionary used in CDBSplinePlatform is","category":"page"},{"location":"man/basisplatform/#","page":"Basis platform","title":"Basis platform","text":"Modules = [BSplineExtension.BSplinePlatforms]\nPages = [\"platforms/DiscreteBSplineDicts.jl\"]","category":"page"},{"location":"man/basisplatform/#","page":"Basis platform","title":"Basis platform","text":"and the one used in CDPETPlatform is","category":"page"},{"location":"man/basisplatform/#","page":"Basis platform","title":"Basis platform","text":"Modules = [BSplineExtension.BSplinePlatforms.CompactPeriodicEquispacedTranslatesDuals]\nPages = [\"platforms/CompactPeriodicEquispacedTranslatesDuals.jl\"]","category":"page"},{"location":"man/basisplatform/#BSplineExtension.BSplinePlatforms.CompactPeriodicEquispacedTranslatesDuals.CompactPeriodicEquispacedTranslatesDual","page":"Basis platform","title":"BSplineExtension.BSplinePlatforms.CompactPeriodicEquispacedTranslatesDuals.CompactPeriodicEquispacedTranslatesDual","text":"struct CompactPeriodicEquispacedTranslatesDual{T,K,DICT<:PeriodicEquispacedTranslates{T,K,PERIODIZATION}}\n        <: PeriodicEquispacedTranslates{T,K,PERIODIZATION}\n\nCompact, discrete, periodic dual –- with respect to a DiracCombMeasure –- to the a dictionary consisting of equispaced periodic translates of a kernel (see PeriodicEquispacedTranslates of CompactTranslatesDict).\n\nSince this basis is discrete, it can only be evaluated in an PeriodicEquispacedGrid.\n\nUsed in CDPETPlatform\n\nExample\n\njulia> using BSplineExtension.BSplinePlatforms.CompactPeriodicEquispacedTranslatesDuals, CompactTranslatesDict\n\njulia> B = CompactPeriodicEquispacedTranslatesDual(BSplineTranslatesBasis(10,3,-1,1), 2)\nEquispaced translates of a discrete kernel dual\n    ↳ Periodic equispaced translates of a periodic kernel function\n      ↳ length = 10\n      ↳ Float64 -> Float64\n      ↳ support = -1.0..1.0\n    ↳ m = 2\n\njulia> A = evaluation_operator(B, PeriodicEquispacedGrid(10, BasisFunctions.support(B)))\nMultiplication by BasisFunctions.VerticalBandedMatrix{Float64}\n\n\n\n\n\n","category":"type"},{"location":"man/basisplatform/#","page":"Basis platform","title":"Basis platform","text":"Modules = [BSplineExtension]\nPages = [\"platforms/ndplatforms.jl\"]","category":"page"},{"location":"man/basisplatform/#BSplineExtension.NdBSplinePlatform-Union{Tuple{Tuple{Vararg{Int64,N}}}, Tuple{N}, Tuple{Tuple{Vararg{Int64,N}},Any}} where N","page":"Basis platform","title":"BSplineExtension.NdBSplinePlatform","text":"NdBSplinePlatform(orders::NTuple{N,Int), types=ntuple(k=>BSplinePlatform, Val(N))) where N\n\nReturn a ProductPlatform that has B-spline platforms of type types and order orders as its elements.\n\n\n\n\n\n","category":"method"},{"location":"man/basisplatform/#BSplineExtension.NdCDBSplinePlatform-Union{Tuple{Tuple{Vararg{Int64,N}}}, Tuple{N}, Tuple{Tuple{Vararg{Int64,N}},Any}} where N","page":"Basis platform","title":"BSplineExtension.NdCDBSplinePlatform","text":"NdCDBSplinePlatform(orders::NTuple{N,Int), types=ntuple(k=>BSplinePlatform, Val(N))) where N\n\nReturn a ProductPlatform that has B-spline platforms of type types and order orders as its elements.\n\n\n\n\n\n","category":"method"},{"location":"man/basisplatform/#BSplineExtension.NdEpsBSplinePlatform-Union{Tuple{Tuple{Vararg{Int64,N}}}, Tuple{N}, Tuple{Tuple{Vararg{Int64,N}},Any}} where N","page":"Basis platform","title":"BSplineExtension.NdEpsBSplinePlatform","text":"NdEpsBSplinePlatform(orders::NTuple{N,Int), types=ntuple(k=>BSplinePlatform, Val(N))) where N\n\nReturn a ProductPlatform that has B-spline platforms of type types and order orders as its elements.\n\n\n\n\n\n","category":"method"},{"location":"man/1dextension/#D-B-spline-extension-1","page":"1D extension platform","title":"1D B-spline extension","text":"","category":"section"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"DocTestSetup = quote\n    using BSplineExtension, DomainSets\nend","category":"page"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"The package provides a fast solver for a B-spline extensions such as, e.g.,","category":"page"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"julia> P1 = ExtensionFramePlatform(BSplinePlatform(),0.0..0.5)\nExtensionFramePlatform(BSplinePlatform{Float64,3}(), 0.0..0.5)\njulia> P2 = ExtensionFramePlatform(EpsBSplinePlatform(),0.0..0.5)\nExtensionFramePlatform(EpsBSplinePlatform{Float64,3}(), 0.0..0.5)\njulia> P3 = ExtensionFramePlatform(CDBSplinePlatform(),0.0..0.5)\nExtensionFramePlatform(CDBSplinePlatform{Float64,3}(), 0.0..0.5)","category":"page"},{"location":"man/1dextension/#The-AZ-algorithm-1","page":"1D extension platform","title":"The AZ algorithm","text":"","category":"section"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"The AZ algorithm (reference needed) provides for a fast approximation algorithm even though the system that needs to be solved is rectangular, and highly ill conditioned","category":"page"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"The AZ algorithm consists of three steps for solving a system Ax=b","category":"page"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"Solve (A-AZ'A)x1 = (I-AZ')b\nx2 = Z'(b-Ax1)\nx = x1 + x2","category":"page"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"Z can be any matrix, but the algorithm is most efficient if A and Z' can be applied fast, and A-AZ'A is of low rank.","category":"page"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"For the platforms above these operators are readily available using AZ_A and AZ_Zt:","category":"page"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"julia> N = 200;\n\n\njulia> AZ_A(P1,N)\nOperator D * R[1:401 → 𝕀] * M\n\nR\t:\tRestriction of coefficients to subset\nM\t:\tMultiplication by BasisFunctions.VerticalBandedMatrix{Float64}\nD\t:\tDiagonal operator with element type Float64\n\t\t    ↳ [1.0, 1.0, 1.0  …  1.0, 1.0, 1.0]\n\njulia> AZ_Zt(P1,N)\nOperator M₂ * M₁ * E[ 𝕀 → 1:401] * D\n\nM₂\t:\tMultiplication by Circulant{Float64,Complex{Float64}}\nM₁\t:\tMultiplication by BasisFunctions.HorizontalBandedMatrix{Float64}\nE\t:\tExtending coefficients by zero padding\nD\t:\tDiagonal operator with element type Float64\n\t\t    ↳ [1.0, 1.0, 1.0  …  1.0, 1.0, 1.0]\n\njulia> AZ_Zt(P2,N)\nOperator M₁ * M₂ * E[ 𝕀 → 1:401] * D\n\nM₂\t:\tMultiplication by BasisFunctions.HorizontalBandedMatrix{Float64}\nM₁\t:\tMultiplication by BasisFunctions.HorizontalBandedMatrix{Float64}\nE\t:\tExtending coefficients by zero padding\nD\t:\tDiagonal operator with element type Float64\n\t\t    ↳ [1.0, 1.0, 1.0  …  1.0, 1.0, 1.0]\n\n\njulia> AZ_Zt(P3,N)\nOperator M * E[ 𝕀 → 1:401] * D\n\nM\t:\tMultiplication by BasisFunctions.HorizontalBandedMatrix{Float64}\nE\t:\tExtending coefficients by zero padding\nD\t:\tDiagonal operator with element type Float64\n\t\t    ↳ [1.0, 1.0, 1.0  …  1.0, 1.0, 1.0]\n\n","category":"page"},{"location":"man/1dextension/#Sparseness-of-A-and-Z'-1","page":"1D extension platform","title":"Sparseness of A and Z'","text":"","category":"section"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"The FrameFun package contains fast solvers for solving the low-rank system of the first AZ step. However, it does not use the (ϵ-)sparse (with sparse: a lot of zero elements) structure of A and Zt which is a consequence of the compact nature of a B-spline basis. For all platforms AZ_A returns the same operator. As is seen above A is a banded matrix, hence sparse. For P1 is Z' is the product of a banded matrix and a circulant matrix. The circulant matrix has exponentially decreasing elements in the first column, hence ϵ-sparse. Only for P2 and P3, Z' is actually be sparse.","category":"page"},{"location":"man/1dextension/#BSplineExtensionSolver-1","page":"1D extension platform","title":"BSplineExtensionSolver","text":"","category":"section"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"The BSplineExtensionSolver of this package uses the compactness of the B-spline basis and by consequence the sparseness of A and Z'. First, the compactness of the B-spline basis introduces a lot of zero columns in A-AZ'A. Therefore, the BSplineExtensionSolver removes the zero columns. It knows of the location of the non zero columns by using nonzero_coefficients. Secondly, since also the dual dictionary is (ϵ-)compactness (see Basis platforms for examples of these dual dictionaries), A-AZ'A will contain some (ϵ-)zero rows. These are also removed by the BSplineExtensionSolver, where crop_tol is a parameter that indicates how large ϵ should be. The resulting system is of size truncated_size.","category":"page"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"Below we illustrate how the truncated_size of a BSplineExtensionSolver changes for varying platform, B-spline order (m), crop_tol and degrees of freedom (N).","category":"page"},{"location":"man/1dextension/#Column-truncation-1","page":"1D extension platform","title":"Column truncation","text":"","category":"section"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"The column truncation of A-AZ'A depends on the order of the B-spline (and the domain) only. This is seen in the figure below, which shows truncated_size(S)[2] with S=BSplineExtensionSolver(A-A*Zt*A).","category":"page"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"[.pdf], [generated .tex], [generated .tikz]","category":"page"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"(Image: )","category":"page"},{"location":"man/1dextension/#Row-truncation-1","page":"1D extension platform","title":"Row truncation","text":"","category":"section"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"The row truncation of A-AZ'A depends on all of the parameters. This is seen in the figure below, which shows truncated_size(S)[1] with S=BSplineExtensionSolver(A-A*Zt*A;crop_tol=crop_tol) for crop_tol in (1e-16, 1e-10).","category":"page"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"The truncated size reaches a limit for N growing large. This limit is much smaller using CDBSplinePlatform. The EpsBSplinePlatform is a bit more robust  than the BSplinePlatform in generating a low truncated size since it enforces the dual dictionary to be compact, while the dual dictionaries of the latter are only ϵ-compact.","category":"page"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"[.pdf], [generated .tex], [generated .tikz]","category":"page"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"(Image: )","category":"page"},{"location":"man/1dextension/#B-spline-extension-approximation-1","page":"1D extension platform","title":"B-spline extension approximation","text":"","category":"section"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"The BSplineExtensionSolver is just a means to an end. It is used in the first step of the AZ algorithm. In this section we use the solver to approximate the exponential function on the interval [0,0.5] using a B-spline basis of order m on the interval [0,1]. First we show the convergence results, then the time complexity of the approximation algorithm.","category":"page"},{"location":"man/1dextension/#Errors-1","page":"1D extension platform","title":"Errors","text":"","category":"section"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"In the figure below, which shows the uniform error of approximating a 1 dimensional analytic function (details are in the introduction of this section),  we see that convergence is algebraic (mathcal O(N^-m)). This is common behaviour for approximating with splines.","category":"page"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"[.pdf], [generated .tex], [generated .tikz]","category":"page"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"(Image: )","category":"page"},{"location":"man/1dextension/#Timings-1","page":"1D extension platform","title":"Timings","text":"","category":"section"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"For all platforms, the most costly part is the evaluating operator-vector multiply (A-AZA)x since solving the system is constant in N (it is mathcal O(d^3)). For the first platform the operator-vector multiply time complexity is mathcal O(Nlog N). For the last two the multiply time complexity is mathcal O(N). However, the construction complexity of Z' for the first two platforms is also mathcal O(Nlog N).  ","category":"page"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"The quasi-linear behaviour of the method is confirmed in the figure below that show the timings for approximating a 1 dimensional analytic function     (details are in the introduction of this section).","category":"page"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"[.pdf], [generated .tex], [generated .tikz]","category":"page"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"(Image: )","category":"page"},{"location":"man/1dextension/#B-spline-extension-Reference-1","page":"1D extension platform","title":"B-spline extension Reference","text":"","category":"section"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"Modules = [BSplineExtensionSolvers]\nPages = [\"nonzero_cols.jl\"]","category":"page"},{"location":"man/1dextension/#BSplineExtension.BSplineExtensionSolvers.nonzero_coefficients-Tuple{Dictionary{S,T} where T where S<:Number,Real}","page":"1D extension platform","title":"BSplineExtension.BSplineExtensionSolvers.nonzero_coefficients","text":"nonzero_coefficients(dict::Dictionary1d, x::Real)\n\nReturn the coefficient indices (UnitRange) of the dict elements that evaluate non zero in x\n\n\n\n\n\n","category":"method"},{"location":"man/1dextension/#","page":"1D extension platform","title":"1D extension platform","text":"Modules = [BSplineExtensionSolvers]\nPages = [\"BSplineExtensionSolvers.jl\"]","category":"page"},{"location":"man/1dextension/#BSplineExtension.BSplineExtensionSolvers.BSplineExtensionSolver","page":"1D extension platform","title":"BSplineExtension.BSplineExtensionSolvers.BSplineExtensionSolver","text":"struct BSplineExtensionSolver{T} <: BasisFunctions.VectorizingSolverOperator{T}\n\nThis solver is efficient and effective in the first step of the AZ algorithm of a compact dictionary only. For this dictionary the function nonzero_coefficients should be much smaller than the length of the dictionary.\n\nSee also:  nonzero_coefficients\n\nBSplineExtensionSolver(M::DictionaryOperator; directsolver=:qr, crop=false, crop_tol=0, verbose=false; options...)\n\nArguments\n\nM: The operator to be solved. Its source should be an ExtensionFrame   (with a support and a superdict) and   its destination a GridBasis with collocation points in the source support.   The indices of the nonzero columns of M should be equal to the indices of the   source superdict elements that evaluate non-zero on   the source support boundary. An example is AZ'A-A where A is AZ_A and Z'   is AZ_Zt of the platform ExtensionFramePlatform(CDBSplinePlatform(), 0.0..0.5)\n\nKeywords\n\ndirectsolver::Symbol = :qr: The direct solver to use to solve the left-over   truncated Operator M. See FrameFun.\ncrop::Bool = true: Truncate the nonzero rows too.\ncrop_tol::Number = 0: If crop is true, truncate the rows with elements smaller than crop_tol.\nsparse::Bool = false: convert the cropped matrix to a sparse matrix.\nverbose::Bool = false: Print method information. See FrameFun\n\nExamples\n\nThe easiest use of BSplineExtensionSolver is providing it just with (AZ'A-A)\n\njulia> P = ExtensionFramePlatform(CDBSplinePlatform(), 0.0..0.5); N = 30;\n\njulia> plunge = plungeoperator(P,N); A = AZ_A(P,N); Zt = AZ_Zt(P,N);\n\njulia> M = plunge*A;\n\njulia> S = BSplineExtensionSolver(M;crop=true)\nBSplineExtensionSolver\n\n\n\njulia> b = samplingoperator(P,N)*exp;\n\njulia> x1 = S*plunge*b;\n\njulia> x2 = Zt*(b-A*x1);\n\njulia> F = DictFun(dictionary(P,N), x1 + x2)\nDictFun{Float64,Float64}(A 1-dimensional Expansion with 30 degrees of freedom.\nBasis: Extension frame\n)\n\nMore often it will be used as a parameter for FrameFun functionality. The following     does the same as the previous example:\n\njulia> P = ExtensionFramePlatform(CDBSplinePlatform(), 0.0..0.5); N = 30;\n\njulia> Fun(exp, P, N; REG = BSplineExtensionSolver)\nDictFun{Float64,Float64}(A 1-dimensional Expansion with 30 degrees of freedom.\nBasis: Extension frame\n)\n\n\n\n\n\n\n","category":"type"},{"location":"man/1dextension/#BSplineExtension.BSplineExtensionSolvers.truncated_size-Tuple{BSplineExtensionSolver}","page":"1D extension platform","title":"BSplineExtension.BSplineExtensionSolvers.truncated_size","text":"truncated_size(op::BSplineExtensionSolver)\n\nThe size of the smaller system. The one that has to be solved with a direct solver.\n\n\n\n\n\n","category":"method"},{"location":"man/ndbsplineextension/#ND-B-spline-extension-1","page":"ND extension platform","title":"ND B-spline extension","text":"","category":"section"},{"location":"man/ndbsplineextension/#","page":"ND extension platform","title":"ND extension platform","text":"DocTestSetup = quote\n    using BSplineExtension, DomainSets  \nend","category":"page"},{"location":"man/ndbsplineextension/#","page":"ND extension platform","title":"ND extension platform","text":"The package provides a fast solver for multidimensional B-spline extensions such as, e.g.,","category":"page"},{"location":"man/ndbsplineextension/#","page":"ND extension platform","title":"ND extension platform","text":"julia> P1 = ExtensionFramePlatform(NdBSplinePlatform((3,3)),(0.0..0.5)^2)\nExtensionFramePlatform(ProductPlatform{2}((BSplinePlatform{Float64,3}(), BSplinePlatform{Float64,3}())), 0.0..0.5 x 0.0..0.5)\njulia> P2 = ExtensionFramePlatform(NdEpsBSplinePlatform((3,3)),(0.0..0.5)^2)\nExtensionFramePlatform(ProductPlatform{2}((EpsBSplinePlatform{Float64,3}(), EpsBSplinePlatform{Float64,3}())), 0.0..0.5 x 0.0..0.5)\njulia> P3 = ExtensionFramePlatform(NdCDBSplinePlatform((3,3)),(0.0..0.5)^2)\nExtensionFramePlatform(ProductPlatform{2}((CDBSplinePlatform{Float64,3}(), CDBSplinePlatform{Float64,3}())), 0.0..0.5 x 0.0..0.5)","category":"page"},{"location":"man/ndbsplineextension/#Column-truncation-1","page":"ND extension platform","title":"Column truncation","text":"","category":"section"},{"location":"man/ndbsplineextension/#","page":"ND extension platform","title":"ND extension platform","text":"In one dimensional B-spline extension approximation the nonzero columns of A-AZA was independent of N. It is, however dependent on the size of the boundary of the domain. For two dimensional domains the number of nonzero rows is thus mathcal O(sqrtN).","category":"page"},{"location":"man/ndbsplineextension/#","page":"ND extension platform","title":"ND extension platform","text":"[.pdf], [generated .tex]","category":"page"},{"location":"man/ndbsplineextension/#","page":"ND extension platform","title":"ND extension platform","text":"(Image: )","category":"page"},{"location":"man/ndbsplineextension/#Row-truncation-1","page":"ND extension platform","title":"Row truncation","text":"","category":"section"},{"location":"man/ndbsplineextension/#","page":"ND extension platform","title":"ND extension platform","text":"Also the number of rows with a norm larger than epsilon is mathcal O(sqrtN) since the support of a B-spline is independent of N. In two dimension, the support is of the dual dictianary (as in P1 and P2) is quite large. This is why the growth in nonzero rows is first mathcal O(N) in the region that is displayed below in the first two panels. Eventually, the  mathcal O(sqrtN) will be reached. For the compact dual splines the level off is reached at much lower N.","category":"page"},{"location":"man/ndbsplineextension/#","page":"ND extension platform","title":"ND extension platform","text":"[.pdf], [generated .tex]","category":"page"},{"location":"man/ndbsplineextension/#","page":"ND extension platform","title":"ND extension platform","text":"(Image: )","category":"page"},{"location":"man/ndbsplineextension/#Multidimensional-B-spline-extension-approximation-1","page":"ND extension platform","title":"Multidimensional B-spline extension approximation","text":"","category":"section"},{"location":"man/ndbsplineextension/#","page":"ND extension platform","title":"ND extension platform","text":"In this section we use the BSplineExtensionSolver](@ref) solver to approximate the function f(xy)=e^x*y on the square 005^2 using a B-spline basis of order m on the interval 01^2. First we show the convergence results, then the time complexity of the approximation algorithm.","category":"page"},{"location":"man/ndbsplineextension/#Convergence-1","page":"ND extension platform","title":"Convergence","text":"","category":"section"},{"location":"man/ndbsplineextension/#","page":"ND extension platform","title":"ND extension platform","text":"In the figure below, which shows the uniform error of approximating a 2 dimensional analytic function (details are in the introduction of this section),  we see that convergence is algebraic.","category":"page"},{"location":"man/ndbsplineextension/#","page":"ND extension platform","title":"ND extension platform","text":"[.pdf], [generated .tex]","category":"page"},{"location":"man/ndbsplineextension/#","page":"ND extension platform","title":"ND extension platform","text":"(Image: )","category":"page"},{"location":"man/ndbsplineextension/#Timings-1","page":"ND extension platform","title":"Timings","text":"","category":"section"},{"location":"man/ndbsplineextension/#","page":"ND extension platform","title":"ND extension platform","text":"For all platforms and for high N, the most costly part is the first step of the AZ algorithm, i.e., solving (A-AZA)x=(I-AZ)b. The system is of size mathcal O(ntimes n) = mathcal O(sqrtNtimessqrtN), where N is the total number of degrees of freedom and n is the number of dof in one dimension. Therefore, solving this system and by consequence the approting a function costs mathcal O(n^3)=mathcal O(N^frac32).","category":"page"},{"location":"man/ndbsplineextension/#","page":"ND extension platform","title":"ND extension platform","text":"For low N we saw that the first two platforms are not in the regime where the size of the system of mathcal O(sqrtNtimessqrtN), they are mathcal O(NtimessqrtN). We expect to see a mathcal O(N^2) complexity. This complexity is for small N overshadowed by the mathcal O(N^tfrac32) cost of creating the system of the first AZ step.","category":"page"},{"location":"man/ndbsplineextension/#","page":"ND extension platform","title":"ND extension platform","text":"[.pdf], [generated .tex]","category":"page"},{"location":"man/ndbsplineextension/#","page":"ND extension platform","title":"ND extension platform","text":"(Image: )","category":"page"},{"location":"#BSplineExtension.jl-documentation-1","page":"Home","title":"BSplineExtension.jl documentation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"A Julia package for B-spline extension approximations","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"BSplineExtension.jl is not added to the Julia General registry, it is however in the FrameFun registry.","category":"page"},{"location":"#Recomanded-1","page":"Home","title":"Recomanded","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"For Julia 1.1 or higher, you can add the FrameFun registry to the list of your registries. Then add BSplineExtension.jl. From the Julia REPL, type ] to enter Pkg mode and run","category":"page"},{"location":"#","page":"Home","title":"Home","text":"pkg> registry add https://github.com/FrameFunVC/FrameFunRegistry\npkg> add BSplineExtension","category":"page"},{"location":"#Legacy-1","page":"Home","title":"Legacy","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"In Julia 1.0, the package and its dependencies can be installed by cloning their git repository. From the Julia REPL, type ] to enter Pkg mode and run","category":"page"},{"location":"#","page":"Home","title":"Home","text":"pkg> add https://github.com/FrameFunVC/InfiniteVectors.jl\npkg> add https://github.com/FrameFunVC/CardinalBSplines.jl\npkg> add https://github.com/JuliaApproximation/BasisFunctions.jl\npkg> add https://github.com/FrameFunVC/CompactTranslatesDict.jl\npkg> add https://github.com/JuliaApproximation/FrameFun.jl","category":"page"},{"location":"#Manual-1","page":"Home","title":"Manual","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This module consists of multiple platforms. Three of them are basis platforms. Each of them provide a BSplineTranslatesBasis if asked for a dictionary; but they all provide a different kind of dual dictionary, see Basis platforms. The module also extends the FrameFun framework to 1 dimensional B-spline extensions, see 1D B-spline extension.","category":"page"}]
}
